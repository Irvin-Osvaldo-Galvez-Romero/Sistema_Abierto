{"ast":null,"code":"/**\n * Store de Autenticación\n * Gestión global del estado de autenticación con Zustand\n */\n\nimport { create } from 'zustand';\nimport AuthService from '../services/auth.service';\nimport toast from 'react-hot-toast';\nexport const useAuthStore = create(set => ({\n  user: null,\n  isAuthenticated: AuthService.isAuthenticated(),\n  isLoading: false,\n  error: null,\n  /**\n   * Iniciar sesión\n   */\n  login: async credentials => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await AuthService.login(credentials);\n\n      // Guardar tokens\n      AuthService.saveTokens(response.tokens.accessToken, response.tokens.refreshToken);\n\n      // Actualizar estado\n      set({\n        user: response.user,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null\n      });\n      toast.success('¡Bienvenido! Sesión iniciada exitosamente');\n    } catch (error) {\n      var _error$response, _error$response$data, _error$response$data$;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : (_error$response$data$ = _error$response$data.error) === null || _error$response$data$ === void 0 ? void 0 : _error$response$data$.message) || 'Error al iniciar sesión';\n      set({\n        isLoading: false,\n        error: errorMessage,\n        isAuthenticated: false,\n        user: null\n      });\n      toast.error(errorMessage);\n      throw error;\n    }\n  },\n  /**\n   * Cerrar sesión\n   */\n  logout: async () => {\n    try {\n      const refreshToken = AuthService.getRefreshToken();\n      if (refreshToken) {\n        await AuthService.logout(refreshToken);\n      }\n    } catch (error) {\n      console.error('Error al cerrar sesión:', error);\n    } finally {\n      // Limpiar tokens y estado\n      AuthService.clearTokens();\n      set({\n        user: null,\n        isAuthenticated: false,\n        error: null\n      });\n      toast.success('Sesión cerrada exitosamente');\n    }\n  },\n  /**\n   * Cargar información del usuario\n   */\n  loadUser: async () => {\n    if (!AuthService.isAuthenticated()) {\n      set({\n        isAuthenticated: false,\n        user: null\n      });\n      return;\n    }\n    set({\n      isLoading: true\n    });\n    try {\n      const userData = await AuthService.getMe();\n      set({\n        user: {\n          id: userData.userId,\n          email: userData.email,\n          nombre: userData.email.split('@')[0],\n          // Temporal\n          rol: userData.rol\n        },\n        isAuthenticated: true,\n        isLoading: false\n      });\n    } catch (error) {\n      AuthService.clearTokens();\n      set({\n        user: null,\n        isAuthenticated: false,\n        isLoading: false\n      });\n    }\n  },\n  /**\n   * Limpiar error\n   */\n  clearError: () => {\n    set({\n      error: null\n    });\n  }\n}));\nexport default useAuthStore;","map":{"version":3,"names":["create","AuthService","toast","useAuthStore","set","user","isAuthenticated","isLoading","error","login","credentials","response","saveTokens","tokens","accessToken","refreshToken","success","_error$response","_error$response$data","_error$response$data$","errorMessage","data","message","logout","getRefreshToken","console","clearTokens","loadUser","userData","getMe","id","userId","email","nombre","split","rol","clearError"],"sources":["C:/Users/User/Documents/GitHub/Sistema_Abierto/proyecto/frontend/src/store/authStore.ts"],"sourcesContent":["/**\n * Store de Autenticación\n * Gestión global del estado de autenticación con Zustand\n */\n\nimport { create } from 'zustand';\nimport { User, AuthResponse, LoginRequest } from '../types/auth.types';\nimport AuthService from '../services/auth.service';\nimport toast from 'react-hot-toast';\n\ninterface AuthState {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n  \n  // Acciones\n  login: (credentials: LoginRequest) => Promise<void>;\n  logout: () => Promise<void>;\n  loadUser: () => Promise<void>;\n  clearError: () => void;\n}\n\nexport const useAuthStore = create<AuthState>((set) => ({\n  user: null,\n  isAuthenticated: AuthService.isAuthenticated(),\n  isLoading: false,\n  error: null,\n\n  /**\n   * Iniciar sesión\n   */\n  login: async (credentials: LoginRequest) => {\n    set({ isLoading: true, error: null });\n    \n    try {\n      const response: AuthResponse = await AuthService.login(credentials);\n      \n      // Guardar tokens\n      AuthService.saveTokens(response.tokens.accessToken, response.tokens.refreshToken);\n      \n      // Actualizar estado\n      set({\n        user: response.user,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null,\n      });\n      \n      toast.success('¡Bienvenido! Sesión iniciada exitosamente');\n    } catch (error: any) {\n      const errorMessage = error.response?.data?.error?.message || 'Error al iniciar sesión';\n      set({\n        isLoading: false,\n        error: errorMessage,\n        isAuthenticated: false,\n        user: null,\n      });\n      toast.error(errorMessage);\n      throw error;\n    }\n  },\n\n\n  /**\n   * Cerrar sesión\n   */\n  logout: async () => {\n    try {\n      const refreshToken = AuthService.getRefreshToken();\n      \n      if (refreshToken) {\n        await AuthService.logout(refreshToken);\n      }\n    } catch (error) {\n      console.error('Error al cerrar sesión:', error);\n    } finally {\n      // Limpiar tokens y estado\n      AuthService.clearTokens();\n      set({\n        user: null,\n        isAuthenticated: false,\n        error: null,\n      });\n      toast.success('Sesión cerrada exitosamente');\n    }\n  },\n\n  /**\n   * Cargar información del usuario\n   */\n  loadUser: async () => {\n    if (!AuthService.isAuthenticated()) {\n      set({ isAuthenticated: false, user: null });\n      return;\n    }\n\n    set({ isLoading: true });\n    \n    try {\n      const userData = await AuthService.getMe();\n      \n      set({\n        user: {\n          id: userData.userId,\n          email: userData.email,\n          nombre: userData.email.split('@')[0], // Temporal\n          rol: userData.rol,\n        },\n        isAuthenticated: true,\n        isLoading: false,\n      });\n    } catch (error) {\n      AuthService.clearTokens();\n      set({\n        user: null,\n        isAuthenticated: false,\n        isLoading: false,\n      });\n    }\n  },\n\n  /**\n   * Limpiar error\n   */\n  clearError: () => {\n    set({ error: null });\n  },\n}));\n\nexport default useAuthStore;\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}