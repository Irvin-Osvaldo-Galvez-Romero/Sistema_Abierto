{"ast":null,"code":"/**\n * Servicio de Autenticación Frontend\n * Métodos para interactuar con la API de autenticación\n */\n\nimport api from './api.service';\nexport class AuthService {\n  /**\n   * Iniciar sesión\n   */\n  static async login(data) {\n    const response = await api.post('/auth/login', data);\n    return response.data.data;\n  }\n\n  /**\n   * Solicitar restablecimiento de contraseña\n   */\n  static async forgotPassword(email) {\n    await api.post('/auth/forgot-password', {\n      email\n    });\n  }\n\n  /**\n   * Restablecer contraseña con token\n   */\n  static async resetPassword(token, password) {\n    await api.post('/auth/reset-password', {\n      token,\n      password\n    });\n  }\n\n  /**\n   * Renovar token de acceso\n   */\n  static async refreshToken(refreshToken) {\n    const response = await api.post('/auth/refresh', {\n      refreshToken\n    });\n    return response.data.data;\n  }\n\n  /**\n   * Cerrar sesión\n   */\n  static async logout(refreshToken) {\n    await api.post('/auth/logout', {\n      refreshToken\n    });\n  }\n\n  /**\n   * Obtener perfil del usuario\n   */\n  static async getProfile() {\n    const response = await api.get('/auth/profile');\n    return response.data.data;\n  }\n\n  /**\n   * Obtener información básica del usuario\n   */\n  static async getMe() {\n    const response = await api.get('/auth/me');\n    return response.data.data;\n  }\n\n  /**\n   * Guardar tokens en localStorage\n   */\n  static saveTokens(accessToken, refreshToken) {\n    localStorage.setItem('accessToken', accessToken);\n    localStorage.setItem('refreshToken', refreshToken);\n  }\n\n  /**\n   * Obtener access token del localStorage\n   */\n  static getAccessToken() {\n    return localStorage.getItem('accessToken');\n  }\n\n  /**\n   * Obtener refresh token del localStorage\n   */\n  static getRefreshToken() {\n    return localStorage.getItem('refreshToken');\n  }\n\n  /**\n   * Limpiar tokens del localStorage\n   */\n  static clearTokens() {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n  }\n\n  /**\n   * Verificar si el usuario está autenticado\n   */\n  static isAuthenticated() {\n    return !!this.getAccessToken();\n  }\n}\nexport default AuthService;","map":{"version":3,"names":["api","AuthService","login","data","response","post","forgotPassword","email","resetPassword","token","password","refreshToken","logout","getProfile","get","getMe","saveTokens","accessToken","localStorage","setItem","getAccessToken","getItem","getRefreshToken","clearTokens","removeItem","isAuthenticated"],"sources":["C:/Users/User/Documents/GitHub/Sistema_Abierto/proyecto/frontend/src/services/auth.service.ts"],"sourcesContent":["/**\n * Servicio de Autenticación Frontend\n * Métodos para interactuar con la API de autenticación\n */\n\nimport api from './api.service';\nimport { LoginRequest, AuthResponse, UserProfile } from '../types/auth.types';\n\nexport class AuthService {\n\n  /**\n   * Iniciar sesión\n   */\n  static async login(data: LoginRequest): Promise<AuthResponse> {\n    const response = await api.post<{ success: boolean; data: AuthResponse }>('/auth/login', data);\n    return response.data.data;\n  }\n\n  /**\n   * Solicitar restablecimiento de contraseña\n   */\n  static async forgotPassword(email: string): Promise<void> {\n    await api.post('/auth/forgot-password', { email });\n  }\n\n  /**\n   * Restablecer contraseña con token\n   */\n  static async resetPassword(token: string, password: string): Promise<void> {\n    await api.post('/auth/reset-password', { token, password });\n  }\n\n  /**\n   * Renovar token de acceso\n   */\n  static async refreshToken(refreshToken: string): Promise<{ accessToken: string }> {\n    const response = await api.post<{ success: boolean; data: { accessToken: string } }>(\n      '/auth/refresh',\n      { refreshToken }\n    );\n    return response.data.data;\n  }\n\n  /**\n   * Cerrar sesión\n   */\n  static async logout(refreshToken: string): Promise<void> {\n    await api.post('/auth/logout', { refreshToken });\n  }\n\n  /**\n   * Obtener perfil del usuario\n   */\n  static async getProfile(): Promise<UserProfile> {\n    const response = await api.get<{ success: boolean; data: UserProfile }>('/auth/profile');\n    return response.data.data;\n  }\n\n  /**\n   * Obtener información básica del usuario\n   */\n  static async getMe(): Promise<any> {\n    const response = await api.get<{ success: boolean; data: any }>('/auth/me');\n    return response.data.data;\n  }\n\n  /**\n   * Guardar tokens en localStorage\n   */\n  static saveTokens(accessToken: string, refreshToken: string): void {\n    localStorage.setItem('accessToken', accessToken);\n    localStorage.setItem('refreshToken', refreshToken);\n  }\n\n  /**\n   * Obtener access token del localStorage\n   */\n  static getAccessToken(): string | null {\n    return localStorage.getItem('accessToken');\n  }\n\n  /**\n   * Obtener refresh token del localStorage\n   */\n  static getRefreshToken(): string | null {\n    return localStorage.getItem('refreshToken');\n  }\n\n  /**\n   * Limpiar tokens del localStorage\n   */\n  static clearTokens(): void {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n  }\n\n  /**\n   * Verificar si el usuario está autenticado\n   */\n  static isAuthenticated(): boolean {\n    return !!this.getAccessToken();\n  }\n}\n\nexport default AuthService;\n\n\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,OAAOA,GAAG,MAAM,eAAe;AAG/B,OAAO,MAAMC,WAAW,CAAC;EAEvB;AACF;AACA;EACE,aAAaC,KAAKA,CAACC,IAAkB,EAAyB;IAC5D,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAA2C,aAAa,EAAEF,IAAI,CAAC;IAC9F,OAAOC,QAAQ,CAACD,IAAI,CAACA,IAAI;EAC3B;;EAEA;AACF;AACA;EACE,aAAaG,cAAcA,CAACC,KAAa,EAAiB;IACxD,MAAMP,GAAG,CAACK,IAAI,CAAC,uBAAuB,EAAE;MAAEE;IAAM,CAAC,CAAC;EACpD;;EAEA;AACF;AACA;EACE,aAAaC,aAAaA,CAACC,KAAa,EAAEC,QAAgB,EAAiB;IACzE,MAAMV,GAAG,CAACK,IAAI,CAAC,sBAAsB,EAAE;MAAEI,KAAK;MAAEC;IAAS,CAAC,CAAC;EAC7D;;EAEA;AACF;AACA;EACE,aAAaC,YAAYA,CAACA,YAAoB,EAAoC;IAChF,MAAMP,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAC7B,eAAe,EACf;MAAEM;IAAa,CACjB,CAAC;IACD,OAAOP,QAAQ,CAACD,IAAI,CAACA,IAAI;EAC3B;;EAEA;AACF;AACA;EACE,aAAaS,MAAMA,CAACD,YAAoB,EAAiB;IACvD,MAAMX,GAAG,CAACK,IAAI,CAAC,cAAc,EAAE;MAAEM;IAAa,CAAC,CAAC;EAClD;;EAEA;AACF;AACA;EACE,aAAaE,UAAUA,CAAA,EAAyB;IAC9C,MAAMT,QAAQ,GAAG,MAAMJ,GAAG,CAACc,GAAG,CAA0C,eAAe,CAAC;IACxF,OAAOV,QAAQ,CAACD,IAAI,CAACA,IAAI;EAC3B;;EAEA;AACF;AACA;EACE,aAAaY,KAAKA,CAAA,EAAiB;IACjC,MAAMX,QAAQ,GAAG,MAAMJ,GAAG,CAACc,GAAG,CAAkC,UAAU,CAAC;IAC3E,OAAOV,QAAQ,CAACD,IAAI,CAACA,IAAI;EAC3B;;EAEA;AACF;AACA;EACE,OAAOa,UAAUA,CAACC,WAAmB,EAAEN,YAAoB,EAAQ;IACjEO,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEF,WAAW,CAAC;IAChDC,YAAY,CAACC,OAAO,CAAC,cAAc,EAAER,YAAY,CAAC;EACpD;;EAEA;AACF;AACA;EACE,OAAOS,cAAcA,CAAA,EAAkB;IACrC,OAAOF,YAAY,CAACG,OAAO,CAAC,aAAa,CAAC;EAC5C;;EAEA;AACF;AACA;EACE,OAAOC,eAAeA,CAAA,EAAkB;IACtC,OAAOJ,YAAY,CAACG,OAAO,CAAC,cAAc,CAAC;EAC7C;;EAEA;AACF;AACA;EACE,OAAOE,WAAWA,CAAA,EAAS;IACzBL,YAAY,CAACM,UAAU,CAAC,aAAa,CAAC;IACtCN,YAAY,CAACM,UAAU,CAAC,cAAc,CAAC;EACzC;;EAEA;AACF;AACA;EACE,OAAOC,eAAeA,CAAA,EAAY;IAChC,OAAO,CAAC,CAAC,IAAI,CAACL,cAAc,CAAC,CAAC;EAChC;AACF;AAEA,eAAenB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}