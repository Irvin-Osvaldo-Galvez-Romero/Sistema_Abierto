
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UsuarioScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  nombre: 'nombre',
  apellidoPaterno: 'apellidoPaterno',
  apellidoMaterno: 'apellidoMaterno',
  telefono: 'telefono',
  rol: 'rol',
  activo: 'activo',
  emailVerificado: 'emailVerificado',
  primerLogin: 'primerLogin',
  intentosFallidos: 'intentosFallidos',
  bloqueadoHasta: 'bloqueadoHasta',
  ultimoAcceso: 'ultimoAcceso',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TokenSesionScalarFieldEnum = {
  id: 'id',
  token: 'token',
  tipo: 'tipo',
  expiraEn: 'expiraEn',
  revocado: 'revocado',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  usuarioId: 'usuarioId',
  createdAt: 'createdAt'
};

exports.Prisma.EstudianteScalarFieldEnum = {
  id: 'id',
  matricula: 'matricula',
  fechaNacimiento: 'fechaNacimiento',
  curp: 'curp',
  nss: 'nss',
  direccion: 'direccion',
  ciudad: 'ciudad',
  estado: 'estado',
  codigoPostal: 'codigoPostal',
  tutorNombre: 'tutorNombre',
  tutorTelefono: 'tutorTelefono',
  tutorEmail: 'tutorEmail',
  estatus: 'estatus',
  fechaIngreso: 'fechaIngreso',
  fechaEgreso: 'fechaEgreso',
  usuarioId: 'usuarioId',
  carreraId: 'carreraId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CarreraScalarFieldEnum = {
  id: 'id',
  clave: 'clave',
  nombre: 'nombre',
  descripcion: 'descripcion',
  duracionSemestres: 'duracionSemestres',
  creditos: 'creditos',
  modalidad: 'modalidad',
  activo: 'activo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MateriaScalarFieldEnum = {
  id: 'id',
  clave: 'clave',
  nombre: 'nombre',
  descripcion: 'descripcion',
  creditos: 'creditos',
  semestre: 'semestre',
  horasTeoria: 'horasTeoria',
  horasPractica: 'horasPractica',
  activo: 'activo',
  carreraId: 'carreraId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GrupoScalarFieldEnum = {
  id: 'id',
  clave: 'clave',
  periodo: 'periodo',
  cupoMaximo: 'cupoMaximo',
  cupoDisponible: 'cupoDisponible',
  horario: 'horario',
  aula: 'aula',
  activo: 'activo',
  materiaId: 'materiaId',
  profesorId: 'profesorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InscripcionScalarFieldEnum = {
  id: 'id',
  periodo: 'periodo',
  estatus: 'estatus',
  fechaInscripcion: 'fechaInscripcion',
  estudianteId: 'estudianteId',
  grupoId: 'grupoId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CalificacionScalarFieldEnum = {
  id: 'id',
  calificacion: 'calificacion',
  estatus: 'estatus',
  observaciones: 'observaciones',
  estudianteId: 'estudianteId',
  materiaId: 'materiaId',
  inscripcionId: 'inscripcionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfesorScalarFieldEnum = {
  id: 'id',
  numeroEmpleado: 'numeroEmpleado',
  especialidad: 'especialidad',
  grado: 'grado',
  departamento: 'departamento',
  activo: 'activo',
  usuarioId: 'usuarioId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdministradorScalarFieldEnum = {
  id: 'id',
  numeroEmpleado: 'numeroEmpleado',
  area: 'area',
  cargo: 'cargo',
  activo: 'activo',
  usuarioId: 'usuarioId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DocumentoScalarFieldEnum = {
  id: 'id',
  folio: 'folio',
  tipo: 'tipo',
  titulo: 'titulo',
  descripcion: 'descripcion',
  rutaArchivo: 'rutaArchivo',
  rutaArchivoFirmado: 'rutaArchivoFirmado',
  hashArchivo: 'hashArchivo',
  tamanoBytes: 'tamanoBytes',
  mimeType: 'mimeType',
  estatus: 'estatus',
  fechaEmision: 'fechaEmision',
  fechaVencimiento: 'fechaVencimiento',
  validado: 'validado',
  firmado: 'firmado',
  cadenaBlockchain: 'cadenaBlockchain',
  qrCode: 'qrCode',
  creadoPorId: 'creadoPorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DocumentoEstudianteScalarFieldEnum = {
  id: 'id',
  observaciones: 'observaciones',
  motivoRechazo: 'motivoRechazo',
  revisadoPor: 'revisadoPor',
  fechaRevision: 'fechaRevision',
  escaneoVirus: 'escaneoVirus',
  virusDetectado: 'virusDetectado',
  nombreVirusDetectado: 'nombreVirusDetectado',
  documentoId: 'documentoId',
  estudianteId: 'estudianteId',
  createdAt: 'createdAt'
};

exports.Prisma.NotificacionScalarFieldEnum = {
  id: 'id',
  tipo: 'tipo',
  titulo: 'titulo',
  mensaje: 'mensaje',
  leida: 'leida',
  documentoId: 'documentoId',
  estudianteId: 'estudianteId',
  createdAt: 'createdAt'
};

exports.Prisma.ActividadUsuarioScalarFieldEnum = {
  id: 'id',
  accion: 'accion',
  entidad: 'entidad',
  entidadId: 'entidadId',
  descripcion: 'descripcion',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  usuarioId: 'usuarioId',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Rol = exports.$Enums.Rol = {
  SUPER_ADMIN: 'SUPER_ADMIN',
  ADMINISTRADOR: 'ADMINISTRADOR',
  PROFESOR: 'PROFESOR',
  ESTUDIANTE: 'ESTUDIANTE',
  PERSONAL_ADMINISTRATIVO: 'PERSONAL_ADMINISTRATIVO'
};

exports.TipoToken = exports.$Enums.TipoToken = {
  ACCESS: 'ACCESS',
  REFRESH: 'REFRESH',
  RESET_PASSWORD: 'RESET_PASSWORD',
  VERIFY_EMAIL: 'VERIFY_EMAIL'
};

exports.EstatusEstudiante = exports.$Enums.EstatusEstudiante = {
  ACTIVO: 'ACTIVO',
  INACTIVO: 'INACTIVO',
  EGRESADO: 'EGRESADO',
  BAJA_TEMPORAL: 'BAJA_TEMPORAL',
  BAJA_DEFINITIVA: 'BAJA_DEFINITIVA'
};

exports.Modalidad = exports.$Enums.Modalidad = {
  PRESENCIAL: 'PRESENCIAL',
  EN_LINEA: 'EN_LINEA',
  MIXTA: 'MIXTA'
};

exports.EstatusInscripcion = exports.$Enums.EstatusInscripcion = {
  INSCRITO: 'INSCRITO',
  CURSANDO: 'CURSANDO',
  APROBADO: 'APROBADO',
  REPROBADO: 'REPROBADO',
  BAJA: 'BAJA'
};

exports.TipoDocumento = exports.$Enums.TipoDocumento = {
  KARDEX: 'KARDEX',
  FICHA_REINSCRIPCION: 'FICHA_REINSCRIPCION',
  COMPROBANTE_PAGO: 'COMPROBANTE_PAGO'
};

exports.EstatusDocumento = exports.$Enums.EstatusDocumento = {
  PENDIENTE: 'PENDIENTE',
  EN_REVISION: 'EN_REVISION',
  APROBADO: 'APROBADO',
  RECHAZADO: 'RECHAZADO',
  VENCIDO: 'VENCIDO',
  ANULADO: 'ANULADO'
};

exports.TipoNotificacion = exports.$Enums.TipoNotificacion = {
  DOCUMENTO_APROBADO: 'DOCUMENTO_APROBADO',
  DOCUMENTO_RECHAZADO: 'DOCUMENTO_RECHAZADO',
  DOCUMENTO_PENDIENTE: 'DOCUMENTO_PENDIENTE',
  GENERAL: 'GENERAL'
};

exports.Prisma.ModelName = {
  Usuario: 'Usuario',
  TokenSesion: 'TokenSesion',
  Estudiante: 'Estudiante',
  Carrera: 'Carrera',
  Materia: 'Materia',
  Grupo: 'Grupo',
  Inscripcion: 'Inscripcion',
  Calificacion: 'Calificacion',
  Profesor: 'Profesor',
  Administrador: 'Administrador',
  Documento: 'Documento',
  DocumentoEstudiante: 'DocumentoEstudiante',
  Notificacion: 'Notificacion',
  ActividadUsuario: 'ActividadUsuario'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
