{"ast":null,"code":"/**\r\n * Store de Autenticación\r\n * Gestión global del estado de autenticación con Zustand\r\n */\n\nimport { create } from 'zustand';\nimport AuthService from '../services/auth.service';\nimport toast from 'react-hot-toast';\nexport const useAuthStore = create(set => ({\n  user: null,\n  isAuthenticated: AuthService.isAuthenticated(),\n  isLoading: false,\n  error: null,\n  /**\r\n   * Iniciar sesión\r\n   */\n  login: async credentials => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await AuthService.login(credentials);\n\n      // Guardar tokens\n      AuthService.saveTokens(response.tokens.accessToken, response.tokens.refreshToken);\n\n      // Actualizar estado\n      set({\n        user: response.user,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null\n      });\n      toast.success('¡Bienvenido! Sesión iniciada exitosamente');\n    } catch (error) {\n      var _error$response, _error$response$data, _error$response$data$;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : (_error$response$data$ = _error$response$data.error) === null || _error$response$data$ === void 0 ? void 0 : _error$response$data$.message) || 'Error al iniciar sesión';\n      set({\n        isLoading: false,\n        error: errorMessage,\n        isAuthenticated: false,\n        user: null\n      });\n      toast.error(errorMessage);\n      throw error;\n    }\n  },\n  /**\r\n   * Registrar usuario\r\n   */\n  register: async data => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await AuthService.register(data);\n\n      // Guardar tokens\n      AuthService.saveTokens(response.tokens.accessToken, response.tokens.refreshToken);\n\n      // Actualizar estado\n      set({\n        user: response.user,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null\n      });\n      toast.success('¡Cuenta creada exitosamente!');\n    } catch (error) {\n      var _error$response2, _error$response2$data, _error$response2$data2;\n      const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : (_error$response2$data2 = _error$response2$data.error) === null || _error$response2$data2 === void 0 ? void 0 : _error$response2$data2.message) || 'Error al registrar usuario';\n      set({\n        isLoading: false,\n        error: errorMessage\n      });\n      toast.error(errorMessage);\n      throw error;\n    }\n  },\n  /**\r\n   * Cerrar sesión\r\n   */\n  logout: async () => {\n    try {\n      const refreshToken = AuthService.getRefreshToken();\n      if (refreshToken) {\n        await AuthService.logout(refreshToken);\n      }\n    } catch (error) {\n      console.error('Error al cerrar sesión:', error);\n    } finally {\n      // Limpiar tokens y estado\n      AuthService.clearTokens();\n      set({\n        user: null,\n        isAuthenticated: false,\n        error: null\n      });\n      toast.success('Sesión cerrada exitosamente');\n    }\n  },\n  /**\r\n   * Cargar información del usuario\r\n   */\n  loadUser: async () => {\n    if (!AuthService.isAuthenticated()) {\n      set({\n        isAuthenticated: false,\n        user: null\n      });\n      return;\n    }\n    set({\n      isLoading: true\n    });\n    try {\n      const userData = await AuthService.getMe();\n      set({\n        user: {\n          id: userData.userId,\n          email: userData.email,\n          nombre: userData.email.split('@')[0],\n          // Temporal\n          rol: userData.rol\n        },\n        isAuthenticated: true,\n        isLoading: false\n      });\n    } catch (error) {\n      AuthService.clearTokens();\n      set({\n        user: null,\n        isAuthenticated: false,\n        isLoading: false\n      });\n    }\n  },\n  /**\r\n   * Limpiar error\r\n   */\n  clearError: () => {\n    set({\n      error: null\n    });\n  }\n}));\nexport default useAuthStore;","map":{"version":3,"names":["create","AuthService","toast","useAuthStore","set","user","isAuthenticated","isLoading","error","login","credentials","response","saveTokens","tokens","accessToken","refreshToken","success","_error$response","_error$response$data","_error$response$data$","errorMessage","data","message","register","_error$response2","_error$response2$data","_error$response2$data2","logout","getRefreshToken","console","clearTokens","loadUser","userData","getMe","id","userId","email","nombre","split","rol","clearError"],"sources":["C:/Users/User/Documents/GitHub/Sistema_Abierto/proyecto/frontend/src/store/authStore.ts"],"sourcesContent":["/**\r\n * Store de Autenticación\r\n * Gestión global del estado de autenticación con Zustand\r\n */\r\n\r\nimport { create } from 'zustand';\r\nimport { User, AuthResponse, LoginRequest, RegisterRequest } from '../types/auth.types';\r\nimport AuthService from '../services/auth.service';\r\nimport toast from 'react-hot-toast';\r\n\r\ninterface AuthState {\r\n  user: User | null;\r\n  isAuthenticated: boolean;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  \r\n  // Acciones\r\n  login: (credentials: LoginRequest) => Promise<void>;\r\n  register: (data: RegisterRequest) => Promise<void>;\r\n  logout: () => Promise<void>;\r\n  loadUser: () => Promise<void>;\r\n  clearError: () => void;\r\n}\r\n\r\nexport const useAuthStore = create<AuthState>((set) => ({\r\n  user: null,\r\n  isAuthenticated: AuthService.isAuthenticated(),\r\n  isLoading: false,\r\n  error: null,\r\n\r\n  /**\r\n   * Iniciar sesión\r\n   */\r\n  login: async (credentials: LoginRequest) => {\r\n    set({ isLoading: true, error: null });\r\n    \r\n    try {\r\n      const response: AuthResponse = await AuthService.login(credentials);\r\n      \r\n      // Guardar tokens\r\n      AuthService.saveTokens(response.tokens.accessToken, response.tokens.refreshToken);\r\n      \r\n      // Actualizar estado\r\n      set({\r\n        user: response.user,\r\n        isAuthenticated: true,\r\n        isLoading: false,\r\n        error: null,\r\n      });\r\n      \r\n      toast.success('¡Bienvenido! Sesión iniciada exitosamente');\r\n    } catch (error: any) {\r\n      const errorMessage = error.response?.data?.error?.message || 'Error al iniciar sesión';\r\n      set({\r\n        isLoading: false,\r\n        error: errorMessage,\r\n        isAuthenticated: false,\r\n        user: null,\r\n      });\r\n      toast.error(errorMessage);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Registrar usuario\r\n   */\r\n  register: async (data: RegisterRequest) => {\r\n    set({ isLoading: true, error: null });\r\n    \r\n    try {\r\n      const response: AuthResponse = await AuthService.register(data);\r\n      \r\n      // Guardar tokens\r\n      AuthService.saveTokens(response.tokens.accessToken, response.tokens.refreshToken);\r\n      \r\n      // Actualizar estado\r\n      set({\r\n        user: response.user,\r\n        isAuthenticated: true,\r\n        isLoading: false,\r\n        error: null,\r\n      });\r\n      \r\n      toast.success('¡Cuenta creada exitosamente!');\r\n    } catch (error: any) {\r\n      const errorMessage = error.response?.data?.error?.message || 'Error al registrar usuario';\r\n      set({\r\n        isLoading: false,\r\n        error: errorMessage,\r\n      });\r\n      toast.error(errorMessage);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Cerrar sesión\r\n   */\r\n  logout: async () => {\r\n    try {\r\n      const refreshToken = AuthService.getRefreshToken();\r\n      \r\n      if (refreshToken) {\r\n        await AuthService.logout(refreshToken);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al cerrar sesión:', error);\r\n    } finally {\r\n      // Limpiar tokens y estado\r\n      AuthService.clearTokens();\r\n      set({\r\n        user: null,\r\n        isAuthenticated: false,\r\n        error: null,\r\n      });\r\n      toast.success('Sesión cerrada exitosamente');\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Cargar información del usuario\r\n   */\r\n  loadUser: async () => {\r\n    if (!AuthService.isAuthenticated()) {\r\n      set({ isAuthenticated: false, user: null });\r\n      return;\r\n    }\r\n\r\n    set({ isLoading: true });\r\n    \r\n    try {\r\n      const userData = await AuthService.getMe();\r\n      \r\n      set({\r\n        user: {\r\n          id: userData.userId,\r\n          email: userData.email,\r\n          nombre: userData.email.split('@')[0], // Temporal\r\n          rol: userData.rol,\r\n        },\r\n        isAuthenticated: true,\r\n        isLoading: false,\r\n      });\r\n    } catch (error) {\r\n      AuthService.clearTokens();\r\n      set({\r\n        user: null,\r\n        isAuthenticated: false,\r\n        isLoading: false,\r\n      });\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Limpiar error\r\n   */\r\n  clearError: () => {\r\n    set({ error: null });\r\n  },\r\n}));\r\n\r\nexport default useAuthStore;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}