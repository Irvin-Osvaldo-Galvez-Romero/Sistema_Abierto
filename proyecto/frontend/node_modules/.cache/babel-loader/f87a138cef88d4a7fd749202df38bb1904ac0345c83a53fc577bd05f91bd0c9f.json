{"ast":null,"code":"/**\r\n * Servicio de Autenticación Frontend\r\n * Métodos para interactuar con la API de autenticación\r\n */\n\nimport api from './api.service';\nexport class AuthService {\n  /**\r\n   * Registrar nuevo usuario\r\n   */\n  static async register(data) {\n    const response = await api.post('/auth/register', data);\n    return response.data.data;\n  }\n\n  /**\r\n   * Iniciar sesión\r\n   */\n  static async login(data) {\n    const response = await api.post('/auth/login', data);\n    return response.data.data;\n  }\n\n  /**\r\n   * Renovar token de acceso\r\n   */\n  static async refreshToken(refreshToken) {\n    const response = await api.post('/auth/refresh', {\n      refreshToken\n    });\n    return response.data.data;\n  }\n\n  /**\r\n   * Cerrar sesión\r\n   */\n  static async logout(refreshToken) {\n    await api.post('/auth/logout', {\n      refreshToken\n    });\n  }\n\n  /**\r\n   * Obtener perfil del usuario\r\n   */\n  static async getProfile() {\n    const response = await api.get('/auth/profile');\n    return response.data.data;\n  }\n\n  /**\r\n   * Obtener información básica del usuario\r\n   */\n  static async getMe() {\n    const response = await api.get('/auth/me');\n    return response.data.data;\n  }\n\n  /**\r\n   * Guardar tokens en localStorage\r\n   */\n  static saveTokens(accessToken, refreshToken) {\n    localStorage.setItem('accessToken', accessToken);\n    localStorage.setItem('refreshToken', refreshToken);\n  }\n\n  /**\r\n   * Obtener access token del localStorage\r\n   */\n  static getAccessToken() {\n    return localStorage.getItem('accessToken');\n  }\n\n  /**\r\n   * Obtener refresh token del localStorage\r\n   */\n  static getRefreshToken() {\n    return localStorage.getItem('refreshToken');\n  }\n\n  /**\r\n   * Limpiar tokens del localStorage\r\n   */\n  static clearTokens() {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n  }\n\n  /**\r\n   * Verificar si el usuario está autenticado\r\n   */\n  static isAuthenticated() {\n    return !!this.getAccessToken();\n  }\n}\nexport default AuthService;","map":{"version":3,"names":["api","AuthService","register","data","response","post","login","refreshToken","logout","getProfile","get","getMe","saveTokens","accessToken","localStorage","setItem","getAccessToken","getItem","getRefreshToken","clearTokens","removeItem","isAuthenticated"],"sources":["C:/Users/User/Documents/GitHub/Sistema_Abierto/proyecto/frontend/src/services/auth.service.ts"],"sourcesContent":["/**\r\n * Servicio de Autenticación Frontend\r\n * Métodos para interactuar con la API de autenticación\r\n */\r\n\r\nimport api from './api.service';\r\nimport { LoginRequest, RegisterRequest, AuthResponse, UserProfile } from '../types/auth.types';\r\n\r\nexport class AuthService {\r\n  /**\r\n   * Registrar nuevo usuario\r\n   */\r\n  static async register(data: RegisterRequest): Promise<AuthResponse> {\r\n    const response = await api.post<{ success: boolean; data: AuthResponse }>('/auth/register', data);\r\n    return response.data.data;\r\n  }\r\n\r\n  /**\r\n   * Iniciar sesión\r\n   */\r\n  static async login(data: LoginRequest): Promise<AuthResponse> {\r\n    const response = await api.post<{ success: boolean; data: AuthResponse }>('/auth/login', data);\r\n    return response.data.data;\r\n  }\r\n\r\n  /**\r\n   * Renovar token de acceso\r\n   */\r\n  static async refreshToken(refreshToken: string): Promise<{ accessToken: string }> {\r\n    const response = await api.post<{ success: boolean; data: { accessToken: string } }>(\r\n      '/auth/refresh',\r\n      { refreshToken }\r\n    );\r\n    return response.data.data;\r\n  }\r\n\r\n  /**\r\n   * Cerrar sesión\r\n   */\r\n  static async logout(refreshToken: string): Promise<void> {\r\n    await api.post('/auth/logout', { refreshToken });\r\n  }\r\n\r\n  /**\r\n   * Obtener perfil del usuario\r\n   */\r\n  static async getProfile(): Promise<UserProfile> {\r\n    const response = await api.get<{ success: boolean; data: UserProfile }>('/auth/profile');\r\n    return response.data.data;\r\n  }\r\n\r\n  /**\r\n   * Obtener información básica del usuario\r\n   */\r\n  static async getMe(): Promise<any> {\r\n    const response = await api.get<{ success: boolean; data: any }>('/auth/me');\r\n    return response.data.data;\r\n  }\r\n\r\n  /**\r\n   * Guardar tokens en localStorage\r\n   */\r\n  static saveTokens(accessToken: string, refreshToken: string): void {\r\n    localStorage.setItem('accessToken', accessToken);\r\n    localStorage.setItem('refreshToken', refreshToken);\r\n  }\r\n\r\n  /**\r\n   * Obtener access token del localStorage\r\n   */\r\n  static getAccessToken(): string | null {\r\n    return localStorage.getItem('accessToken');\r\n  }\r\n\r\n  /**\r\n   * Obtener refresh token del localStorage\r\n   */\r\n  static getRefreshToken(): string | null {\r\n    return localStorage.getItem('refreshToken');\r\n  }\r\n\r\n  /**\r\n   * Limpiar tokens del localStorage\r\n   */\r\n  static clearTokens(): void {\r\n    localStorage.removeItem('accessToken');\r\n    localStorage.removeItem('refreshToken');\r\n  }\r\n\r\n  /**\r\n   * Verificar si el usuario está autenticado\r\n   */\r\n  static isAuthenticated(): boolean {\r\n    return !!this.getAccessToken();\r\n  }\r\n}\r\n\r\nexport default AuthService;\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,OAAOA,GAAG,MAAM,eAAe;AAG/B,OAAO,MAAMC,WAAW,CAAC;EACvB;AACF;AACA;EACE,aAAaC,QAAQA,CAACC,IAAqB,EAAyB;IAClE,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAA2C,gBAAgB,EAAEF,IAAI,CAAC;IACjG,OAAOC,QAAQ,CAACD,IAAI,CAACA,IAAI;EAC3B;;EAEA;AACF;AACA;EACE,aAAaG,KAAKA,CAACH,IAAkB,EAAyB;IAC5D,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAA2C,aAAa,EAAEF,IAAI,CAAC;IAC9F,OAAOC,QAAQ,CAACD,IAAI,CAACA,IAAI;EAC3B;;EAEA;AACF;AACA;EACE,aAAaI,YAAYA,CAACA,YAAoB,EAAoC;IAChF,MAAMH,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAC7B,eAAe,EACf;MAAEE;IAAa,CACjB,CAAC;IACD,OAAOH,QAAQ,CAACD,IAAI,CAACA,IAAI;EAC3B;;EAEA;AACF;AACA;EACE,aAAaK,MAAMA,CAACD,YAAoB,EAAiB;IACvD,MAAMP,GAAG,CAACK,IAAI,CAAC,cAAc,EAAE;MAAEE;IAAa,CAAC,CAAC;EAClD;;EAEA;AACF;AACA;EACE,aAAaE,UAAUA,CAAA,EAAyB;IAC9C,MAAML,QAAQ,GAAG,MAAMJ,GAAG,CAACU,GAAG,CAA0C,eAAe,CAAC;IACxF,OAAON,QAAQ,CAACD,IAAI,CAACA,IAAI;EAC3B;;EAEA;AACF;AACA;EACE,aAAaQ,KAAKA,CAAA,EAAiB;IACjC,MAAMP,QAAQ,GAAG,MAAMJ,GAAG,CAACU,GAAG,CAAkC,UAAU,CAAC;IAC3E,OAAON,QAAQ,CAACD,IAAI,CAACA,IAAI;EAC3B;;EAEA;AACF;AACA;EACE,OAAOS,UAAUA,CAACC,WAAmB,EAAEN,YAAoB,EAAQ;IACjEO,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEF,WAAW,CAAC;IAChDC,YAAY,CAACC,OAAO,CAAC,cAAc,EAAER,YAAY,CAAC;EACpD;;EAEA;AACF;AACA;EACE,OAAOS,cAAcA,CAAA,EAAkB;IACrC,OAAOF,YAAY,CAACG,OAAO,CAAC,aAAa,CAAC;EAC5C;;EAEA;AACF;AACA;EACE,OAAOC,eAAeA,CAAA,EAAkB;IACtC,OAAOJ,YAAY,CAACG,OAAO,CAAC,cAAc,CAAC;EAC7C;;EAEA;AACF;AACA;EACE,OAAOE,WAAWA,CAAA,EAAS;IACzBL,YAAY,CAACM,UAAU,CAAC,aAAa,CAAC;IACtCN,YAAY,CAACM,UAAU,CAAC,cAAc,CAAC;EACzC;;EAEA;AACF;AACA;EACE,OAAOC,eAAeA,CAAA,EAAY;IAChC,OAAO,CAAC,CAAC,IAAI,CAACL,cAAc,CAAC,CAAC;EAChC;AACF;AAEA,eAAef,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}